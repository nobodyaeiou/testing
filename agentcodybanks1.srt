rom keras.datasets import imdb
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)

data = np.concatenate((X_train, X_test), axis=0) # axis 0 is first running vertically downwards across rows (axis 0), axis 1 is second running horizontally across columns (axis 1), 
label = np.concatenate((y_train, y_test), axis=0) 

X_train.shape
X_test.shape 
y_train.shape
y_test.shape 


print("Review is ",X_train[0])
print("Review is ",X_train[0])

vocab=imdb.get_word_index() # Retrieve the word index file mapping words to indices
print(vocab) 

y_train
y_test

def vectorize(sequences, dimension = 10000): # We will vectorize every review and fill it with zeros so that it contains exactly 10,000 numbers. 
# Create an all-zero matrix of shape (len(sequences), dimension) 
  results = np.zeros((len(sequences), dimension)) 
  for i, sequence in enumerate(sequences): 
    results[i, sequence] = 1 
  return results  

test_x = data[:10000] 
test_y = label[:10000] 
train_x = data[10000:] 
train_y = label[10000:] 

test_x.shape 
test_y.shape 
train_x.shape
train_y.shape

print("Categories:", np.unique(label))
print("Number of unique words:", len(np.unique(np.hstack(data))))

length = [len(i) for i in data] 
print("Average Review length:", np.mean(length)) 
print("Standard Deviation:", round(np.std(length))) 

print("Label:", label[0]) 
Label: 1 
print("Label:", label[1]) 
Label: 0 
print(data[0]) 

index = imdb.get_word_index()

reverse_index = dict([(value, key) for (key, value) in index.items()])

decoded = " ".join( [reverse_index.get(i - 3, "#") for i in data[0]] ) 
print(decoded) 

data = np.asarray(data, dtype = 'int')

data = vectorize(data) 
label = np.array(label).astype("float32") 
labelDF=pd.DataFrame({'label':label}) 
sns.countplot(x='label', data=labelDF) 

from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(data,label, test_size=0.20, random_state=1) 

X_train.shape 
X_test.shape 

from keras import models 
from keras import layers 
model = models.Sequential() 
# Input - Layer 
# Note that we set the input-shape to 10,000 at the input-layer because our reviews are 10,000 integers long. 
# The input-layer takes 10,000 as input and outputs it with a shape of 50. 
model.add(layers.Dense(50, activation = "relu", input_shape=(10000, )))

model.add(layers.Dropout(0.3, noise_shape=None, seed=None)) 
model.add(layers.Dense(50, activation = "relu")) 
model.add(layers.Dropout(0.2, noise_shape=None, seed=None)) 
model.add(layers.Dense(50, activation = "relu")) 

model.add(layers.Dense(1, activation = "sigmoid")) 
model.summary() 

import tensorflow as tf 
callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)

model.compile( 
optimizer = "adam", loss = "binary_crossentropy", metrics = ["accuracy"] )

from sklearn.model_selection import train_test_split 

results = model.fit( 
X_train, y_train, 
epochs= 2, 
batch_size = 500, 
validation_data = (X_test, y_test), 
callbacks=[callback] 
)

print(np.mean(results.history["val_accuracy"]))

score = model.evaluate(X_test, y_test, batch_size=500)

print('Test loss:', score[0]) 
print('Test accuracy:', score[1])

print(results.history.keys()) 

plt.plot(results.history['accuracy']) 
plt.plot(results.history['val_accuracy']) 
plt.title('model accuracy') 
plt.ylabel('accuracy') 
plt.xlabel('epoch') 
plt.legend(['train', 'test'], loc='upper left') 
plt.show() 


plt.plot(results.history['loss']) 
plt.plot(results.history['val_loss']) 
plt.title('model loss') 
plt.ylabel('loss')


plt.xlabel('epoch') 
plt.legend(['train', 'test'], loc='upper left') 
plt.show() 
